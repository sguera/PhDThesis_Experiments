                                   kerncraft                                    
/users/staff/ifi/guerrera/THESIS/stempelvalidation/stencils/3D/2r/homogeneous/box/constant/3d-2r-homogeneous-constant-box-stencil.c        -m Intel_Xeon_CPU_E5-2640_v4.yml
-D M 500 -D N 500 -D P 500
----------------------------------- Roofline -----------------------------------
double a[M][N][P];
double b[M][N][P];
double c0;

for(int k=2; k < M-2; k++){
for(int j=2; j < N-2; j++){
for(int i=2; i < P-2; i++){
b[k][j][i] = c0 * (a[k][j][i]
+ a[k-2][j-2][i-2]
+ a[k-1][j-2][i-2]
+ a[k][j-2][i-2]
+ a[k+1][j-2][i-2]
+ a[k+2][j-2][i-2]
+ a[k-2][j-1][i-2]
+ a[k-1][j-1][i-2]
+ a[k][j-1][i-2]
+ a[k+1][j-1][i-2]
+ a[k+2][j-1][i-2]
+ a[k-2][j][i-2]
+ a[k-1][j][i-2]
+ a[k][j][i-2]
+ a[k+1][j][i-2]
+ a[k+2][j][i-2]
+ a[k-2][j+1][i-2]
+ a[k-1][j+1][i-2]
+ a[k][j+1][i-2]
+ a[k+1][j+1][i-2]
+ a[k+2][j+1][i-2]
+ a[k-2][j+2][i-2]
+ a[k-1][j+2][i-2]
+ a[k][j+2][i-2]
+ a[k+1][j+2][i-2]
+ a[k+2][j+2][i-2]
+ a[k-2][j-2][i-1]
+ a[k-1][j-2][i-1]
+ a[k][j-2][i-1]
+ a[k+1][j-2][i-1]
+ a[k+2][j-2][i-1]
+ a[k-2][j-1][i-1]
+ a[k-1][j-1][i-1]
+ a[k][j-1][i-1]
+ a[k+1][j-1][i-1]
+ a[k+2][j-1][i-1]
+ a[k-2][j][i-1]
+ a[k-1][j][i-1]
+ a[k][j][i-1]
+ a[k+1][j][i-1]
+ a[k+2][j][i-1]
+ a[k-2][j+1][i-1]
+ a[k-1][j+1][i-1]
+ a[k][j+1][i-1]
+ a[k+1][j+1][i-1]
+ a[k+2][j+1][i-1]
+ a[k-2][j+2][i-1]
+ a[k-1][j+2][i-1]
+ a[k][j+2][i-1]
+ a[k+1][j+2][i-1]
+ a[k+2][j+2][i-1]
+ a[k-2][j-2][i]
+ a[k-1][j-2][i]
+ a[k][j-2][i]
+ a[k+1][j-2][i]
+ a[k+2][j-2][i]
+ a[k-2][j-1][i]
+ a[k-1][j-1][i]
+ a[k][j-1][i]
+ a[k+1][j-1][i]
+ a[k+2][j-1][i]
+ a[k-2][j][i]
+ a[k-1][j][i]
+ a[k+1][j][i]
+ a[k+2][j][i]
+ a[k-2][j+1][i]
+ a[k-1][j+1][i]
+ a[k][j+1][i]
+ a[k+1][j+1][i]
+ a[k+2][j+1][i]
+ a[k-2][j+2][i]
+ a[k-1][j+2][i]
+ a[k][j+2][i]
+ a[k+1][j+2][i]
+ a[k+2][j+2][i]
+ a[k-2][j-2][i+1]
+ a[k-1][j-2][i+1]
+ a[k][j-2][i+1]
+ a[k+1][j-2][i+1]
+ a[k+2][j-2][i+1]
+ a[k-2][j-1][i+1]
+ a[k-1][j-1][i+1]
+ a[k][j-1][i+1]
+ a[k+1][j-1][i+1]
+ a[k+2][j-1][i+1]
+ a[k-2][j][i+1]
+ a[k-1][j][i+1]
+ a[k][j][i+1]
+ a[k+1][j][i+1]
+ a[k+2][j][i+1]
+ a[k-2][j+1][i+1]
+ a[k-1][j+1][i+1]
+ a[k][j+1][i+1]
+ a[k+1][j+1][i+1]
+ a[k+2][j+1][i+1]
+ a[k-2][j+2][i+1]
+ a[k-1][j+2][i+1]
+ a[k][j+2][i+1]
+ a[k+1][j+2][i+1]
+ a[k+2][j+2][i+1]
+ a[k-2][j-2][i+2]
+ a[k-1][j-2][i+2]
+ a[k][j-2][i+2]
+ a[k+1][j-2][i+2]
+ a[k+2][j-2][i+2]
+ a[k-2][j-1][i+2]
+ a[k-1][j-1][i+2]
+ a[k][j-1][i+2]
+ a[k+1][j-1][i+2]
+ a[k+2][j-1][i+2]
+ a[k-2][j][i+2]
+ a[k-1][j][i+2]
+ a[k][j][i+2]
+ a[k+1][j][i+2]
+ a[k+2][j][i+2]
+ a[k-2][j+1][i+2]
+ a[k-1][j+1][i+2]
+ a[k][j+1][i+2]
+ a[k+1][j+1][i+2]
+ a[k+2][j+1][i+2]
+ a[k-2][j+2][i+2]
+ a[k-1][j+2][i+2]
+ a[k][j+2][i+2]
+ a[k+1][j+2][i+2]
+ a[k+2][j+2][i+2]
);
}
}
}


variables:     name |   type size             
           ---------+-------------------------
                  a | double (M, N, P) 
                  b | double (M, N, P) 
                 c0 | double None      
           

loop stack:             idx |        min        max       step
                   ---------+---------------------------------
                          k |          2      M - 2          1
                          j |          2      N - 2          1
                          i |          2      P - 2          1
                   

data sources:          name |  offsets   ...
                   ---------+------------...
                          a | (k + 1, j, i + 1)
                            | (k - 2, j, i + 1)
                            | (k - 1, j, i + 1)
                            | (k + 2, j - 2, i - 2)
                            | (k + 2, j - 1, i - 2)
                            | (k + 2, j - 2, i - 1)
                            | (k + 2, j - 1, i - 1)
                            | (k + 2, j, i)
                            | (k + 1, j + 1, i + 1)
                            | (k + 2, j + 2, i + 1)
                            | (k + 1, j + 1, i + 2)
                            | (k + 1, j, i + 2)
                            | (k, j - 2, i + 2)
                            | (k, j - 1, i + 2)
                            | (k + 2, j + 1, i + 2)
                            | (k, j, i - 2)
                            | (k, j, i - 1)
                            | (k - 2, j + 2, i - 2)
                            | (k - 1, j + 2, i - 2)
                            | (k - 2, j + 2, i - 1)
                            | (k - 1, j + 2, i - 1)
                            | (k - 2, j - 2, i + 1)
                            | (k - 1, j - 2, i + 1)
                            | (k - 2, j - 1, i + 1)
                            | (k - 1, j - 1, i + 1)
                            | (k + 1, j + 1, i - 2)
                            | (k + 1, j + 1, i - 1)
                            | (k - 2, j + 2, i)
                            | (k - 1, j + 2, i)
                            | (k - 2, j + 2, i + 1)
                            | (k - 1, j + 2, i + 1)
                            | (k + 1, j + 1, i)
                            | (k + 1, j, i - 2)
                            | (k + 1, j, i - 1)
                            | (k, j, i)
                            | (k + 1, j, i)
                            | (k - 1, j, i)
                            | (k - 2, j, i)
                            | (k - 2, j - 2, i + 2)
                            | (k - 1, j - 2, i + 2)
                            | (k - 2, j - 1, i + 2)
                            | (k - 1, j - 1, i + 2)
                            | (k + 2, j - 2, i + 2)
                            | (k + 2, j - 1, i + 2)
                            | (k + 2, j - 2, i + 1)
                            | (k + 2, j - 1, i + 1)
                            | (k - 2, j, i - 2)
                            | (k - 1, j, i - 2)
                            | (k - 2, j, i - 1)
                            | (k - 1, j, i - 1)
                            | (k + 2, j + 1, i + 1)
                            | (k, j, i + 2)
                            | (k + 2, j + 1, i)
                            | (k + 1, j + 2, i + 1)
                            | (k - 2, j - 1, i - 2)
                            | (k - 1, j - 1, i - 2)
                            | (k - 1, j - 2, i - 2)
                            | (k - 2, j - 2, i - 1)
                            | (k - 1, j - 2, i - 1)
                            | (k - 2, j - 1, i - 1)
                            | (k - 1, j - 1, i - 1)
                            | (k - 2, j - 2, i - 2)
                            | (k + 2, j, i - 2)
                            | (k + 2, j, i - 1)
                            | (k + 1, j + 2, i + 2)
                            | (k - 2, j + 1, i + 2)
                            | (k + 1, j - 2, i + 1)
                            | (k + 1, j - 1, i + 1)
                            | (k - 1, j + 1, i + 2)
                            | (k + 2, j - 2, i)
                            | (k + 2, j - 1, i)
                            | (k - 2, j + 1, i + 1)
                            | (k - 1, j + 1, i + 1)
                            | (k + 1, j - 2, i + 2)
                            | (k + 1, j - 1, i + 2)
                            | (k + 2, j + 2, i)
                            | (k + 2, j + 2, i - 2)
                            | (k + 2, j + 2, i - 1)
                            | (k, j, i + 1)
                            | (k + 1, j + 2, i)
                            | (k + 1, j - 2, i - 2)
                            | (k + 1, j - 1, i - 2)
                            | (k + 1, j - 2, i - 1)
                            | (k + 1, j - 1, i - 1)
                            | (k + 1, j - 2, i)
                            | (k + 1, j - 1, i)
                            | (k + 2, j, i + 2)
                            | (k + 1, j + 2, i - 2)
                            | (k + 1, j + 2, i - 1)
                            | (k, j + 2, i)
                            | (k, j + 1, i)
                            | (k - 2, j + 1, i - 2)
                            | (k - 1, j + 1, i - 2)
                            | (k - 2, j + 1, i - 1)
                            | (k - 1, j + 1, i - 1)
                            | (k, j + 2, i - 2)
                            | (k, j + 2, i - 1)
                            | (k, j + 1, i - 2)
                            | (k, j + 1, i - 1)
                            | (k - 2, j + 1, i)
                            | (k - 1, j + 1, i)
                            | (k + 2, j, i + 1)
                            | (k, j - 1, i - 2)
                            | (k, j - 2, i - 2)
                            | (k, j - 2, i - 1)
                            | (k, j - 1, i - 1)
                            | (k + 2, j + 2, i + 2)
                            | (k - 2, j + 2, i + 2)
                            | (k - 1, j + 2, i + 2)
                            | (k, j - 2, i + 1)
                            | (k, j - 1, i + 1)
                            | (k, j + 2, i + 2)
                            | (k, j + 1, i + 2)
                            | (k, j - 2, i)
                            | (k, j - 1, i)
                            | (k - 2, j, i + 2)
                            | (k - 1, j, i + 2)
                            | (k - 2, j - 2, i)
                            | (k - 1, j - 2, i)
                            | (k - 2, j - 1, i)
                            | (k + 2, j + 1, i - 2)
                            | (k + 2, j + 1, i - 1)
                            | (k - 1, j - 1, i)
                            | (k, j + 1, i + 1)
                            | (k, j + 2, i + 1)
                         c0 | None
                   

data destinations:     name |  offsets   ...
                   ---------+------------...
                          b | (k, j, i)
                   

FLOPs:      op | count 
           ----+-------
             * |    1
             + |  124
                =======
                  125

constants:     name | value     
           ---------+-----------
                  M | 500       
                  N | 500       
                  P | 500       
           

{'accesses': {'a': [(k + 1, j, i + 1),
                    (k + 2, j, i - 2),
                    (k - 2, j, i + 1),
                    (k - 1, j, i + 1),
                    (k + 2, j, i - 1),
                    (k + 1, j + 2, i + 2),
                    (k - 2, j + 1, i + 2),
                    (k + 1, j - 2, i + 1),
                    (k + 1, j - 1, i + 1),
                    (k + 2, j - 2, i - 2),
                    (k + 2, j - 1, i - 2),
                    (k + 2, j - 2, i - 1),
                    (k + 2, j - 1, i - 1),
                    (k + 2, j, i),
                    (k + 1, j + 1, i + 1),
                    (k + 2, j + 2, i + 1),
                    (k + 1, j + 1, i + 2),
                    (k + 2, j - 2, i),
                    (k + 2, j - 1, i),
                    (k - 2, j + 1, i + 1),
                    (k - 1, j + 1, i + 1),
                    (k + 1, j - 2, i + 2),
                    (k + 1, j - 1, i + 2),
                    (k + 1, j, i + 2),
                    (k + 2, j + 2, i),
                    (k, j - 2, i + 2),
                    (k, j - 1, i + 2),
                    (k + 2, j + 1, i + 2),
                    (k + 2, j + 2, i - 2),
                    (k + 2, j + 2, i - 1),
                    (k, j, i - 2),
                    (k, j, i - 1),
                    (k, j, i + 1),
                    (k - 2, j + 2, i - 2),
                    (k - 1, j + 2, i - 2),
                    (k - 2, j + 2, i - 1),
                    (k - 1, j + 2, i - 1),
                    (k - 2, j - 2, i + 1),
                    (k - 1, j - 2, i + 1),
                    (k - 2, j - 1, i + 1),
                    (k - 1, j - 1, i + 1),
                    (k + 1, j + 2, i),
                    (k + 1, j + 1, i - 2),
                    (k + 1, j + 1, i - 1),
                    (k - 2, j + 2, i),
                    (k - 1, j + 2, i),
                    (k - 2, j + 2, i + 1),
                    (k - 1, j + 2, i + 1),
                    (k + 1, j - 2, i - 2),
                    (k + 1, j - 1, i - 2),
                    (k + 1, j - 2, i - 1),
                    (k + 1, j - 1, i - 1),
                    (k + 1, j + 1, i),
                    (k + 1, j, i - 2),
                    (k + 1, j, i - 1),
                    (k, j, i),
                    (k + 1, j - 2, i),
                    (k + 1, j - 1, i),
                    (k + 1, j, i),
                    (k - 1, j, i),
                    (k - 2, j, i),
                    (k - 2, j - 2, i + 2),
                    (k - 1, j - 2, i + 2),
                    (k - 2, j - 1, i + 2),
                    (k - 1, j - 1, i + 2),
                    (k + 2, j, i + 2),
                    (k + 1, j + 2, i - 2),
                    (k + 1, j + 2, i - 1),
                    (k, j + 2, i),
                    (k + 2, j - 2, i + 2),
                    (k + 2, j - 1, i + 2),
                    (k, j + 1, i),
                    (k - 2, j + 1, i - 2),
                    (k - 1, j + 1, i - 2),
                    (k - 2, j + 1, i - 1),
                    (k - 1, j + 1, i - 1),
                    (k, j + 2, i - 2),
                    (k, j + 2, i - 1),
                    (k, j + 1, i - 2),
                    (k, j + 1, i - 1),
                    (k + 2, j - 2, i + 1),
                    (k + 2, j - 1, i + 1),
                    (k - 2, j + 1, i),
                    (k - 1, j + 1, i),
                    (k - 2, j, i - 2),
                    (k - 1, j, i - 2),
                    (k - 2, j, i - 1),
                    (k - 1, j, i - 1),
                    (k + 2, j, i + 1),
                    (k - 1, j - 1, i - 2),
                    (k - 1, j - 2, i - 2),
                    (k - 2, j - 2, i - 1),
                    (k - 1, j - 2, i - 1),
                    (k - 2, j - 1, i - 1),
                    (k - 1, j - 1, i - 1),
                    (k + 2, j + 1, i + 1),
                    (k - 2, j - 2, i - 2),
                    (k, j, i + 2),
                    (k, j - 1, i - 2),
                    (k, j - 2, i - 2),
                    (k, j - 2, i - 1),
                    (k, j - 1, i - 1),
                    (k + 2, j + 2, i + 2),
                    (k + 2, j + 1, i),
                    (k - 2, j + 2, i + 2),
                    (k - 1, j + 2, i + 2),
                    (k, j - 2, i + 1),
                    (k, j - 1, i + 1),
                    (k, j + 2, i + 2),
                    (k, j + 1, i + 2),
                    (k, j - 2, i),
                    (k, j - 1, i),
                    (k + 1, j + 2, i + 1),
                    (k - 2, j, i + 2),
                    (k - 1, j, i + 2),
                    (k - 1, j + 1, i + 2),
                    (k - 2, j - 2, i),
                    (k - 1, j - 2, i),
                    (k - 2, j - 1, i),
                    (k + 2, j + 1, i - 2),
                    (k + 2, j + 1, i - 1),
                    (k - 1, j - 1, i),
                    (k, j + 1, i + 1),
                    (k, j + 2, i + 1),
                    (k - 2, j - 1, i - 2)],
              'b': [(k, j, i)],
              'c0': [None]},
 'cache': [{'evicts': 1,
            'hits': 100,
            'misses': 26,
            'name': 'L1',
            'requirement': 1008,
            'tail': 8},
           {'evicts': 1,
            'hits': 120,
            'misses': 6,
            'name': 'L2',
            'requirement': 103968,
            'tail': 3968},
           {'evicts': 1,
            'hits': 124,
            'misses': 2,
            'name': 'L3',
            'requirement': 11983968,
            'tail': 1983968}],
 'destinations': {('b', (k, j, i))},
 'distances': [oo,
               oo,
               247996,
               247996,
               247996,
               247996,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1],
 'distances_bytes': [oo,
                     oo,
                     1983968,
                     1983968,
                     1983968,
                     1983968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8]}
Bottlenecks:
  level | a. intensity |   performance   |   peak bandwidth  | peak bandwidth kernel
--------+--------------+-----------------+-------------------+----------------------
    CPU |              |   41.60 GFLOP/s |                   |
     L1 |  0.41 FLOP/B |   17.34 GFLOP/s |        42.73 GB/s | triad   
     L2 |  0.58 FLOP/B |   23.03 GFLOP/s |        39.80 GB/s | triad   
     L3 |   2.2 FLOP/B |   91.74 GFLOP/s |        41.10 GB/s | triad   
    MEM |   5.2 FLOP/B |   81.48 GFLOP/s |        15.64 GB/s | copy    

Cache or mem bound.
17.34 GFLOP/s due to L1 transfer bottleneck (with bw from triad benchmark)
Arithmetic Intensity: 0.41 FLOP/B

                                   kerncraft                                    
/users/staff/ifi/guerrera/THESIS/stempelvalidation/stencils/3D/2r/homogeneous/box/constant/3d-2r-homogeneous-constant-box-stencil.c        -m Intel_Xeon_CPU_E5-2640_v4.yml
-D M 500 -D N 500 -D P 500
------------------------------------- ECM --------------------------------------
double a[M][N][P];
double b[M][N][P];
double c0;

for(int k=2; k < M-2; k++){
for(int j=2; j < N-2; j++){
for(int i=2; i < P-2; i++){
b[k][j][i] = c0 * (a[k][j][i]
+ a[k-2][j-2][i-2]
+ a[k-1][j-2][i-2]
+ a[k][j-2][i-2]
+ a[k+1][j-2][i-2]
+ a[k+2][j-2][i-2]
+ a[k-2][j-1][i-2]
+ a[k-1][j-1][i-2]
+ a[k][j-1][i-2]
+ a[k+1][j-1][i-2]
+ a[k+2][j-1][i-2]
+ a[k-2][j][i-2]
+ a[k-1][j][i-2]
+ a[k][j][i-2]
+ a[k+1][j][i-2]
+ a[k+2][j][i-2]
+ a[k-2][j+1][i-2]
+ a[k-1][j+1][i-2]
+ a[k][j+1][i-2]
+ a[k+1][j+1][i-2]
+ a[k+2][j+1][i-2]
+ a[k-2][j+2][i-2]
+ a[k-1][j+2][i-2]
+ a[k][j+2][i-2]
+ a[k+1][j+2][i-2]
+ a[k+2][j+2][i-2]
+ a[k-2][j-2][i-1]
+ a[k-1][j-2][i-1]
+ a[k][j-2][i-1]
+ a[k+1][j-2][i-1]
+ a[k+2][j-2][i-1]
+ a[k-2][j-1][i-1]
+ a[k-1][j-1][i-1]
+ a[k][j-1][i-1]
+ a[k+1][j-1][i-1]
+ a[k+2][j-1][i-1]
+ a[k-2][j][i-1]
+ a[k-1][j][i-1]
+ a[k][j][i-1]
+ a[k+1][j][i-1]
+ a[k+2][j][i-1]
+ a[k-2][j+1][i-1]
+ a[k-1][j+1][i-1]
+ a[k][j+1][i-1]
+ a[k+1][j+1][i-1]
+ a[k+2][j+1][i-1]
+ a[k-2][j+2][i-1]
+ a[k-1][j+2][i-1]
+ a[k][j+2][i-1]
+ a[k+1][j+2][i-1]
+ a[k+2][j+2][i-1]
+ a[k-2][j-2][i]
+ a[k-1][j-2][i]
+ a[k][j-2][i]
+ a[k+1][j-2][i]
+ a[k+2][j-2][i]
+ a[k-2][j-1][i]
+ a[k-1][j-1][i]
+ a[k][j-1][i]
+ a[k+1][j-1][i]
+ a[k+2][j-1][i]
+ a[k-2][j][i]
+ a[k-1][j][i]
+ a[k+1][j][i]
+ a[k+2][j][i]
+ a[k-2][j+1][i]
+ a[k-1][j+1][i]
+ a[k][j+1][i]
+ a[k+1][j+1][i]
+ a[k+2][j+1][i]
+ a[k-2][j+2][i]
+ a[k-1][j+2][i]
+ a[k][j+2][i]
+ a[k+1][j+2][i]
+ a[k+2][j+2][i]
+ a[k-2][j-2][i+1]
+ a[k-1][j-2][i+1]
+ a[k][j-2][i+1]
+ a[k+1][j-2][i+1]
+ a[k+2][j-2][i+1]
+ a[k-2][j-1][i+1]
+ a[k-1][j-1][i+1]
+ a[k][j-1][i+1]
+ a[k+1][j-1][i+1]
+ a[k+2][j-1][i+1]
+ a[k-2][j][i+1]
+ a[k-1][j][i+1]
+ a[k][j][i+1]
+ a[k+1][j][i+1]
+ a[k+2][j][i+1]
+ a[k-2][j+1][i+1]
+ a[k-1][j+1][i+1]
+ a[k][j+1][i+1]
+ a[k+1][j+1][i+1]
+ a[k+2][j+1][i+1]
+ a[k-2][j+2][i+1]
+ a[k-1][j+2][i+1]
+ a[k][j+2][i+1]
+ a[k+1][j+2][i+1]
+ a[k+2][j+2][i+1]
+ a[k-2][j-2][i+2]
+ a[k-1][j-2][i+2]
+ a[k][j-2][i+2]
+ a[k+1][j-2][i+2]
+ a[k+2][j-2][i+2]
+ a[k-2][j-1][i+2]
+ a[k-1][j-1][i+2]
+ a[k][j-1][i+2]
+ a[k+1][j-1][i+2]
+ a[k+2][j-1][i+2]
+ a[k-2][j][i+2]
+ a[k-1][j][i+2]
+ a[k][j][i+2]
+ a[k+1][j][i+2]
+ a[k+2][j][i+2]
+ a[k-2][j+1][i+2]
+ a[k-1][j+1][i+2]
+ a[k][j+1][i+2]
+ a[k+1][j+1][i+2]
+ a[k+2][j+1][i+2]
+ a[k-2][j+2][i+2]
+ a[k-1][j+2][i+2]
+ a[k][j+2][i+2]
+ a[k+1][j+2][i+2]
+ a[k+2][j+2][i+2]
);
}
}
}


variables:     name |   type size             
           ---------+-------------------------
                  a | double (M, N, P) 
                  b | double (M, N, P) 
                 c0 | double None      
           

loop stack:             idx |        min        max       step
                   ---------+---------------------------------
                          k |          2      M - 2          1
                          j |          2      N - 2          1
                          i |          2      P - 2          1
                   

data sources:          name |  offsets   ...
                   ---------+------------...
                          a | (k + 1, j, i + 1)
                            | (k - 2, j, i + 1)
                            | (k - 1, j, i + 1)
                            | (k + 2, j - 2, i - 2)
                            | (k + 2, j - 1, i - 2)
                            | (k + 2, j - 2, i - 1)
                            | (k + 2, j - 1, i - 1)
                            | (k + 2, j, i)
                            | (k + 1, j + 1, i + 1)
                            | (k + 2, j + 2, i + 1)
                            | (k + 1, j + 1, i + 2)
                            | (k + 1, j, i + 2)
                            | (k, j - 2, i + 2)
                            | (k, j - 1, i + 2)
                            | (k + 2, j + 1, i + 2)
                            | (k, j, i - 2)
                            | (k, j, i - 1)
                            | (k - 2, j + 2, i - 2)
                            | (k - 1, j + 2, i - 2)
                            | (k - 2, j + 2, i - 1)
                            | (k - 1, j + 2, i - 1)
                            | (k - 2, j - 2, i + 1)
                            | (k - 1, j - 2, i + 1)
                            | (k - 2, j - 1, i + 1)
                            | (k - 1, j - 1, i + 1)
                            | (k + 1, j + 1, i - 2)
                            | (k + 1, j + 1, i - 1)
                            | (k - 2, j + 2, i)
                            | (k - 1, j + 2, i)
                            | (k - 2, j + 2, i + 1)
                            | (k - 1, j + 2, i + 1)
                            | (k + 1, j + 1, i)
                            | (k + 1, j, i - 2)
                            | (k + 1, j, i - 1)
                            | (k, j, i)
                            | (k + 1, j, i)
                            | (k - 1, j, i)
                            | (k - 2, j, i)
                            | (k - 2, j - 2, i + 2)
                            | (k - 1, j - 2, i + 2)
                            | (k - 2, j - 1, i + 2)
                            | (k - 1, j - 1, i + 2)
                            | (k + 2, j - 2, i + 2)
                            | (k + 2, j - 1, i + 2)
                            | (k + 2, j - 2, i + 1)
                            | (k + 2, j - 1, i + 1)
                            | (k - 2, j, i - 2)
                            | (k - 1, j, i - 2)
                            | (k - 2, j, i - 1)
                            | (k - 1, j, i - 1)
                            | (k + 2, j + 1, i + 1)
                            | (k, j, i + 2)
                            | (k + 2, j + 1, i)
                            | (k + 1, j + 2, i + 1)
                            | (k - 2, j - 1, i - 2)
                            | (k - 1, j - 1, i - 2)
                            | (k - 1, j - 2, i - 2)
                            | (k - 2, j - 2, i - 1)
                            | (k - 1, j - 2, i - 1)
                            | (k - 2, j - 1, i - 1)
                            | (k - 1, j - 1, i - 1)
                            | (k - 2, j - 2, i - 2)
                            | (k + 2, j, i - 2)
                            | (k + 2, j, i - 1)
                            | (k + 1, j + 2, i + 2)
                            | (k - 2, j + 1, i + 2)
                            | (k + 1, j - 2, i + 1)
                            | (k + 1, j - 1, i + 1)
                            | (k - 1, j + 1, i + 2)
                            | (k + 2, j - 2, i)
                            | (k + 2, j - 1, i)
                            | (k - 2, j + 1, i + 1)
                            | (k - 1, j + 1, i + 1)
                            | (k + 1, j - 2, i + 2)
                            | (k + 1, j - 1, i + 2)
                            | (k + 2, j + 2, i)
                            | (k + 2, j + 2, i - 2)
                            | (k + 2, j + 2, i - 1)
                            | (k, j, i + 1)
                            | (k + 1, j + 2, i)
                            | (k + 1, j - 2, i - 2)
                            | (k + 1, j - 1, i - 2)
                            | (k + 1, j - 2, i - 1)
                            | (k + 1, j - 1, i - 1)
                            | (k + 1, j - 2, i)
                            | (k + 1, j - 1, i)
                            | (k + 2, j, i + 2)
                            | (k + 1, j + 2, i - 2)
                            | (k + 1, j + 2, i - 1)
                            | (k, j + 2, i)
                            | (k, j + 1, i)
                            | (k - 2, j + 1, i - 2)
                            | (k - 1, j + 1, i - 2)
                            | (k - 2, j + 1, i - 1)
                            | (k - 1, j + 1, i - 1)
                            | (k, j + 2, i - 2)
                            | (k, j + 2, i - 1)
                            | (k, j + 1, i - 2)
                            | (k, j + 1, i - 1)
                            | (k - 2, j + 1, i)
                            | (k - 1, j + 1, i)
                            | (k + 2, j, i + 1)
                            | (k, j - 1, i - 2)
                            | (k, j - 2, i - 2)
                            | (k, j - 2, i - 1)
                            | (k, j - 1, i - 1)
                            | (k + 2, j + 2, i + 2)
                            | (k - 2, j + 2, i + 2)
                            | (k - 1, j + 2, i + 2)
                            | (k, j - 2, i + 1)
                            | (k, j - 1, i + 1)
                            | (k, j + 2, i + 2)
                            | (k, j + 1, i + 2)
                            | (k, j - 2, i)
                            | (k, j - 1, i)
                            | (k - 2, j, i + 2)
                            | (k - 1, j, i + 2)
                            | (k - 2, j - 2, i)
                            | (k - 1, j - 2, i)
                            | (k - 2, j - 1, i)
                            | (k + 2, j + 1, i - 2)
                            | (k + 2, j + 1, i - 1)
                            | (k - 1, j - 1, i)
                            | (k, j + 1, i + 1)
                            | (k, j + 2, i + 1)
                         c0 | None
                   

data destinations:     name |  offsets   ...
                   ---------+------------...
                          b | (k, j, i)
                   

FLOPs:      op | count 
           ----+-------
             * |    1
             + |  124
                =======
                  125

constants:     name | value     
           ---------+-----------
                  M | 500       
                  N | 500       
                  P | 500       
           

Ports and cycles: {'4': 16.0, '3D': 832.0, '2D': 832.0, '7': 16.0, '3': 832.0, '2': 832.0, '6': 52.8, '1': 992.0, '0DV': 0.0, '0': 53.6, '5': 53.6}
Uops: 2848.0
Throughput: 1.28 GFLOP/s
T_nOL = 832.0 cy/CL
T_OL = 2024.0 cy/CL
{'accesses': {'a': [(k + 1, j, i + 1),
                    (k + 2, j, i - 2),
                    (k - 2, j, i + 1),
                    (k - 1, j, i + 1),
                    (k + 2, j, i - 1),
                    (k + 1, j + 2, i + 2),
                    (k - 2, j + 1, i + 2),
                    (k + 1, j - 2, i + 1),
                    (k + 1, j - 1, i + 1),
                    (k + 2, j - 2, i - 2),
                    (k + 2, j - 1, i - 2),
                    (k + 2, j - 2, i - 1),
                    (k + 2, j - 1, i - 1),
                    (k + 2, j, i),
                    (k + 1, j + 1, i + 1),
                    (k + 2, j + 2, i + 1),
                    (k + 1, j + 1, i + 2),
                    (k + 2, j - 2, i),
                    (k + 2, j - 1, i),
                    (k - 2, j + 1, i + 1),
                    (k - 1, j + 1, i + 1),
                    (k + 1, j - 2, i + 2),
                    (k + 1, j - 1, i + 2),
                    (k + 1, j, i + 2),
                    (k + 2, j + 2, i),
                    (k, j - 2, i + 2),
                    (k, j - 1, i + 2),
                    (k + 2, j + 1, i + 2),
                    (k + 2, j + 2, i - 2),
                    (k + 2, j + 2, i - 1),
                    (k, j, i - 2),
                    (k, j, i - 1),
                    (k, j, i + 1),
                    (k - 2, j + 2, i - 2),
                    (k - 1, j + 2, i - 2),
                    (k - 2, j + 2, i - 1),
                    (k - 1, j + 2, i - 1),
                    (k - 2, j - 2, i + 1),
                    (k - 1, j - 2, i + 1),
                    (k - 2, j - 1, i + 1),
                    (k - 1, j - 1, i + 1),
                    (k + 1, j + 2, i),
                    (k + 1, j + 1, i - 2),
                    (k + 1, j + 1, i - 1),
                    (k - 2, j + 2, i),
                    (k - 1, j + 2, i),
                    (k - 2, j + 2, i + 1),
                    (k - 1, j + 2, i + 1),
                    (k + 1, j - 2, i - 2),
                    (k + 1, j - 1, i - 2),
                    (k + 1, j - 2, i - 1),
                    (k + 1, j - 1, i - 1),
                    (k + 1, j + 1, i),
                    (k + 1, j, i - 2),
                    (k + 1, j, i - 1),
                    (k, j, i),
                    (k + 1, j - 2, i),
                    (k + 1, j - 1, i),
                    (k + 1, j, i),
                    (k - 1, j, i),
                    (k - 2, j, i),
                    (k - 2, j - 2, i + 2),
                    (k - 1, j - 2, i + 2),
                    (k - 2, j - 1, i + 2),
                    (k - 1, j - 1, i + 2),
                    (k + 2, j, i + 2),
                    (k + 1, j + 2, i - 2),
                    (k + 1, j + 2, i - 1),
                    (k, j + 2, i),
                    (k + 2, j - 2, i + 2),
                    (k + 2, j - 1, i + 2),
                    (k, j + 1, i),
                    (k - 2, j + 1, i - 2),
                    (k - 1, j + 1, i - 2),
                    (k - 2, j + 1, i - 1),
                    (k - 1, j + 1, i - 1),
                    (k, j + 2, i - 2),
                    (k, j + 2, i - 1),
                    (k, j + 1, i - 2),
                    (k, j + 1, i - 1),
                    (k + 2, j - 2, i + 1),
                    (k + 2, j - 1, i + 1),
                    (k - 2, j + 1, i),
                    (k - 1, j + 1, i),
                    (k - 2, j, i - 2),
                    (k - 1, j, i - 2),
                    (k - 2, j, i - 1),
                    (k - 1, j, i - 1),
                    (k + 2, j, i + 1),
                    (k - 1, j - 1, i - 2),
                    (k - 1, j - 2, i - 2),
                    (k - 2, j - 2, i - 1),
                    (k - 1, j - 2, i - 1),
                    (k - 2, j - 1, i - 1),
                    (k - 1, j - 1, i - 1),
                    (k + 2, j + 1, i + 1),
                    (k - 2, j - 2, i - 2),
                    (k, j, i + 2),
                    (k, j - 1, i - 2),
                    (k, j - 2, i - 2),
                    (k, j - 2, i - 1),
                    (k, j - 1, i - 1),
                    (k + 2, j + 2, i + 2),
                    (k + 2, j + 1, i),
                    (k - 2, j + 2, i + 2),
                    (k - 1, j + 2, i + 2),
                    (k, j - 2, i + 1),
                    (k, j - 1, i + 1),
                    (k, j + 2, i + 2),
                    (k, j + 1, i + 2),
                    (k, j - 2, i),
                    (k, j - 1, i),
                    (k + 1, j + 2, i + 1),
                    (k - 2, j, i + 2),
                    (k - 1, j, i + 2),
                    (k - 1, j + 1, i + 2),
                    (k - 2, j - 2, i),
                    (k - 1, j - 2, i),
                    (k - 2, j - 1, i),
                    (k + 2, j + 1, i - 2),
                    (k + 2, j + 1, i - 1),
                    (k - 1, j - 1, i),
                    (k, j + 1, i + 1),
                    (k, j + 2, i + 1),
                    (k - 2, j - 1, i - 2)],
              'b': [(k, j, i)],
              'c0': [None]},
 'cache': [{'evicts': 1,
            'hits': 100,
            'misses': 26,
            'name': 'L1',
            'requirement': 1008,
            'tail': 8},
           {'evicts': 1,
            'hits': 120,
            'misses': 6,
            'name': 'L2',
            'requirement': 103968,
            'tail': 3968},
           {'evicts': 1,
            'hits': 124,
            'misses': 2,
            'name': 'L3',
            'requirement': 11983968,
            'tail': 1983968}],
 'destinations': {('b', (k, j, i))},
 'distances': [oo,
               oo,
               247996,
               247996,
               247996,
               247996,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               496,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1],
 'distances_bytes': [oo,
                     oo,
                     1983968,
                     1983968,
                     1983968,
                     1983968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     3968,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8]}
L2 = 48.15 GFLOP/s
L3 = 185.71 GFLOP/s
MEM = 332.81 GFLOP/s
memory cycles based on copy kernel with 63.90 GB/s
{ 2024.0 || 832.0 | 54.0 | 14.0 | 7.8 } cy/CL = 1.28 GFLOP/s
{ 2024.0 \ 2024.0 \ 2024.0 \ 2024.0 } cy/CL
saturating at 259.1 cores

