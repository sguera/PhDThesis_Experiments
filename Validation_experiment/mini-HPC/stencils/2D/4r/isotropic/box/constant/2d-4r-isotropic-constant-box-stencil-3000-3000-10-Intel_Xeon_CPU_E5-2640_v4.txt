                                   kerncraft                                    
/users/staff/ifi/guerrera/THESIS/stempelvalidation/stencils/2D/4r/isotropic/box/constant/2d-4r-isotropic-constant-box-stencil.c        -m Intel_Xeon_CPU_E5-2640_v4.yml
-D N 3000 -D M 3000
----------------------------------- Roofline -----------------------------------
double a[M][N];
double b[M][N];
double c0;
double c1;
double c2;
double c3;
double c4;
double c5;
double c6;
double c7;
double c8;

for(int j=4; j < M-4; j++){
for(int i=4; i < N-4; i++){
b[j][i] = c0 * a[j][i]
+ c1 * (a[j][i-1] + a[j-1][i] + a[j+1][i] + a[j][i+1])
+ c2 * (a[j][i-2] + a[j-1][i-1] + a[j+1][i-1] + a[j-2][i] + a[j+2][i] + a[j-1][i+1] + a[j+1][i+1] + a[j][i+2])
+ c3 * (a[j][i-3] + a[j-1][i-2] + a[j+1][i-2] + a[j-2][i-1] + a[j+2][i-1] + a[j-3][i] + a[j+3][i] + a[j-2][i+1] + a[j+2][i+1] + a[j-1][i+2] + a[j+1][i+2] + a[j][i+3])
+ c4 * (a[j][i-4] + a[j-1][i-3] + a[j+1][i-3] + a[j-2][i-2] + a[j+2][i-2] + a[j-3][i-1] + a[j+3][i-1] + a[j-4][i] + a[j+4][i] + a[j-3][i+1] + a[j+3][i+1] + a[j-2][i+2] + a[j+2][i+2] + a[j-1][i+3] + a[j+1][i+3] + a[j][i+4])
+ c5 * (a[j-1][i-4] + a[j+1][i-4] + a[j-2][i-3] + a[j+2][i-3] + a[j-3][i-2] + a[j+3][i-2] + a[j-4][i-1] + a[j+4][i-1] + a[j-4][i+1] + a[j+4][i+1] + a[j-3][i+2] + a[j+3][i+2] + a[j-2][i+3] + a[j+2][i+3] + a[j-1][i+4] + a[j+1][i+4])
+ c6 * (a[j-2][i-4] + a[j+2][i-4] + a[j-3][i-3] + a[j+3][i-3] + a[j-4][i-2] + a[j+4][i-2] + a[j-4][i+2] + a[j+4][i+2] + a[j-3][i+3] + a[j+3][i+3] + a[j-2][i+4] + a[j+2][i+4])
+ c7 * (a[j-3][i-4] + a[j+3][i-4] + a[j-4][i-3] + a[j+4][i-3] + a[j-4][i+3] + a[j+4][i+3] + a[j-3][i+4] + a[j+3][i+4])
+ c8 * (a[j-4][i-4] + a[j+4][i-4] + a[j-4][i+4] + a[j+4][i+4])
;
}
}


variables:     name |   type size             
           ---------+-------------------------
                 c0 | double None      
                 c3 | double None      
                  a | double (M, N)    
                 c7 | double None      
                 c6 | double None      
                 c5 | double None      
                 c1 | double None      
                 c2 | double None      
                 c4 | double None      
                 c8 | double None      
                  b | double (M, N)    
           

loop stack:             idx |        min        max       step
                   ---------+---------------------------------
                          j |          4      M - 4          1
                          i |          4      N - 4          1
                   

data sources:          name |  offsets   ...
                   ---------+------------...
                         c0 | None
                         c3 | None
                          a | (j, i + 1)
                            | (j - 3, i - 1)
                            | (j - 3, i - 2)
                            | (j - 1, i + 1)
                            | (j + 1, i + 1)
                            | (j - 2, i + 1)
                            | (j + 1, i)
                            | (j - 1, i - 3)
                            | (j - 2, i - 3)
                            | (j + 3, i + 2)
                            | (j + 1, i + 3)
                            | (j + 4, i + 4)
                            | (j + 3, i + 4)
                            | (j + 2, i + 1)
                            | (j - 1, i - 4)
                            | (j - 2, i - 4)
                            | (j - 4, i + 3)
                            | (j - 4, i - 1)
                            | (j - 4, i - 2)
                            | (j - 3, i + 3)
                            | (j - 1, i + 4)
                            | (j + 4, i + 2)
                            | (j - 2, i + 4)
                            | (j, i + 4)
                            | (j + 2, i - 4)
                            | (j - 4, i - 3)
                            | (j + 4, i - 4)
                            | (j - 4, i + 2)
                            | (j - 3, i + 4)
                            | (j + 2, i + 4)
                            | (j, i + 2)
                            | (j + 1, i - 2)
                            | (j - 4, i + 4)
                            | (j + 4, i)
                            | (j + 3, i + 3)
                            | (j + 1, i + 4)
                            | (j - 2, i)
                            | (j - 1, i)
                            | (j + 3, i - 3)
                            | (j + 2, i - 1)
                            | (j + 2, i - 2)
                            | (j + 3, i - 2)
                            | (j + 4, i - 1)
                            | (j + 4, i - 2)
                            | (j + 1, i - 3)
                            | (j + 2, i)
                            | (j, i - 3)
                            | (j - 4, i + 1)
                            | (j - 1, i - 1)
                            | (j - 1, i - 2)
                            | (j - 2, i - 1)
                            | (j, i - 2)
                            | (j, i - 1)
                            | (j - 2, i - 2)
                            | (j + 2, i + 3)
                            | (j - 3, i - 3)
                            | (j, i + 3)
                            | (j - 3, i - 4)
                            | (j - 1, i + 3)
                            | (j - 2, i + 3)
                            | (j, i - 4)
                            | (j - 4, i)
                            | (j + 3, i - 4)
                            | (j + 1, i - 4)
                            | (j - 1, i + 2)
                            | (j + 3, i + 1)
                            | (j - 2, i + 2)
                            | (j + 4, i + 3)
                            | (j + 4, i + 1)
                            | (j + 2, i + 2)
                            | (j - 3, i + 2)
                            | (j + 3, i)
                            | (j + 4, i - 3)
                            | (j, i)
                            | (j - 4, i - 4)
                            | (j + 1, i - 1)
                            | (j + 3, i - 1)
                            | (j - 3, i + 1)
                            | (j + 1, i + 2)
                            | (j - 3, i)
                            | (j + 2, i - 3)
                         c6 | None
                         c5 | None
                         c1 | None
                         c2 | None
                         c4 | None
                         c8 | None
                         c7 | None
                   

data destinations:     name |  offsets   ...
                   ---------+------------...
                          b | (j, i)
                   

FLOPs:      op | count 
           ----+-------
             * |    9
             + |   80
                =======
                   89

constants:     name | value     
           ---------+-----------
                  N | 3000      
                  M | 3000      
           

{'accesses': {'a': [(j, i + 1),
                    (j - 3, i - 1),
                    (j - 3, i - 2),
                    (j + 4, i + 4),
                    (j + 1, i + 3),
                    (j + 3, i + 4),
                    (j + 2, i + 1),
                    (j - 4, i + 3),
                    (j - 3, i + 3),
                    (j - 1, i + 4),
                    (j - 2, i + 4),
                    (j - 4, i - 3),
                    (j + 4, i - 4),
                    (j + 2, i - 4),
                    (j - 4, i + 2),
                    (j, i + 2),
                    (j + 4, i),
                    (j + 1, i - 3),
                    (j + 2, i),
                    (j, i - 3),
                    (j - 4, i + 1),
                    (j - 1, i - 1),
                    (j - 1, i - 2),
                    (j - 2, i - 1),
                    (j - 2, i - 2),
                    (j + 2, i + 3),
                    (j - 3, i - 3),
                    (j, i + 3),
                    (j + 4, i + 1),
                    (j + 2, i + 2),
                    (j + 3, i),
                    (j + 4, i - 3),
                    (j, i),
                    (j - 4, i - 4),
                    (j - 3, i + 1),
                    (j - 3, i),
                    (j - 1, i + 1),
                    (j + 1, i + 1),
                    (j - 2, i + 1),
                    (j + 1, i),
                    (j - 1, i - 3),
                    (j - 2, i - 3),
                    (j + 3, i + 2),
                    (j - 1, i - 4),
                    (j - 2, i - 4),
                    (j - 4, i - 1),
                    (j - 4, i - 2),
                    (j, i + 4),
                    (j - 3, i + 4),
                    (j + 2, i + 4),
                    (j + 1, i - 1),
                    (j - 4, i + 4),
                    (j + 3, i + 3),
                    (j + 1, i + 4),
                    (j - 2, i),
                    (j - 1, i),
                    (j + 3, i - 3),
                    (j + 2, i - 1),
                    (j + 2, i - 2),
                    (j + 4, i - 1),
                    (j + 4, i - 2),
                    (j + 3, i - 1),
                    (j, i - 2),
                    (j, i - 1),
                    (j - 3, i - 4),
                    (j - 1, i + 3),
                    (j - 2, i + 3),
                    (j, i - 4),
                    (j - 4, i),
                    (j + 3, i - 4),
                    (j + 1, i - 4),
                    (j - 1, i + 2),
                    (j + 3, i + 1),
                    (j - 2, i + 2),
                    (j + 4, i + 3),
                    (j - 3, i + 2),
                    (j + 1, i - 2),
                    (j + 3, i - 2),
                    (j + 4, i + 2),
                    (j + 1, i + 2),
                    (j + 2, i - 3)],
              'b': [(j, i)],
              'c0': [None],
              'c1': [None],
              'c2': [None],
              'c3': [None],
              'c4': [None],
              'c5': [None],
              'c6': [None],
              'c7': [None],
              'c8': [None]},
 'cache': [{'evicts': 1,
            'hits': 72,
            'misses': 10,
            'name': 'L1',
            'requirement': 656,
            'tail': 8},
           {'evicts': 1,
            'hits': 80,
            'misses': 2,
            'name': 'L2',
            'requirement': 239936,
            'tail': 23936},
           {'evicts': 1,
            'hits': 80,
            'misses': 2,
            'name': 'L3',
            'requirement': 239936,
            'tail': 23936}],
 'destinations': {('b', (j, i))},
 'distances': [oo,
               oo,
               2992,
               2992,
               2992,
               2992,
               2992,
               2992,
               2992,
               2992,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1],
 'distances_bytes': [oo,
                     oo,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8]}
Bottlenecks:
  level | a. intensity |   performance   |   peak bandwidth  | peak bandwidth kernel
--------+--------------+-----------------+-------------------+----------------------
    CPU |              |  416.00 GFLOP/s |                   |
     L1 |  0.59 FLOP/B |  227.21 GFLOP/s |       388.04 GB/s | triad   
     L2 |   1.0 FLOP/B |  384.95 GFLOP/s |       380.62 GB/s | triad   
     L3 |   3.7 FLOP/B | 1232.20 GFLOP/s |       332.28 GB/s | copy    
    MEM |   3.7 FLOP/B |  236.63 GFLOP/s |        63.81 GB/s | copy    

Cache or mem bound.
227.21 GFLOP/s due to L1 transfer bottleneck (with bw from triad benchmark)
Arithmetic Intensity: 0.59 FLOP/B

                                   kerncraft                                    
/users/staff/ifi/guerrera/THESIS/stempelvalidation/stencils/2D/4r/isotropic/box/constant/2d-4r-isotropic-constant-box-stencil.c        -m Intel_Xeon_CPU_E5-2640_v4.yml
-D N 3000 -D M 3000
------------------------------------- ECM --------------------------------------
double a[M][N];
double b[M][N];
double c0;
double c1;
double c2;
double c3;
double c4;
double c5;
double c6;
double c7;
double c8;

for(int j=4; j < M-4; j++){
for(int i=4; i < N-4; i++){
b[j][i] = c0 * a[j][i]
+ c1 * (a[j][i-1] + a[j-1][i] + a[j+1][i] + a[j][i+1])
+ c2 * (a[j][i-2] + a[j-1][i-1] + a[j+1][i-1] + a[j-2][i] + a[j+2][i] + a[j-1][i+1] + a[j+1][i+1] + a[j][i+2])
+ c3 * (a[j][i-3] + a[j-1][i-2] + a[j+1][i-2] + a[j-2][i-1] + a[j+2][i-1] + a[j-3][i] + a[j+3][i] + a[j-2][i+1] + a[j+2][i+1] + a[j-1][i+2] + a[j+1][i+2] + a[j][i+3])
+ c4 * (a[j][i-4] + a[j-1][i-3] + a[j+1][i-3] + a[j-2][i-2] + a[j+2][i-2] + a[j-3][i-1] + a[j+3][i-1] + a[j-4][i] + a[j+4][i] + a[j-3][i+1] + a[j+3][i+1] + a[j-2][i+2] + a[j+2][i+2] + a[j-1][i+3] + a[j+1][i+3] + a[j][i+4])
+ c5 * (a[j-1][i-4] + a[j+1][i-4] + a[j-2][i-3] + a[j+2][i-3] + a[j-3][i-2] + a[j+3][i-2] + a[j-4][i-1] + a[j+4][i-1] + a[j-4][i+1] + a[j+4][i+1] + a[j-3][i+2] + a[j+3][i+2] + a[j-2][i+3] + a[j+2][i+3] + a[j-1][i+4] + a[j+1][i+4])
+ c6 * (a[j-2][i-4] + a[j+2][i-4] + a[j-3][i-3] + a[j+3][i-3] + a[j-4][i-2] + a[j+4][i-2] + a[j-4][i+2] + a[j+4][i+2] + a[j-3][i+3] + a[j+3][i+3] + a[j-2][i+4] + a[j+2][i+4])
+ c7 * (a[j-3][i-4] + a[j+3][i-4] + a[j-4][i-3] + a[j+4][i-3] + a[j-4][i+3] + a[j+4][i+3] + a[j-3][i+4] + a[j+3][i+4])
+ c8 * (a[j-4][i-4] + a[j+4][i-4] + a[j-4][i+4] + a[j+4][i+4])
;
}
}


variables:     name |   type size             
           ---------+-------------------------
                 c0 | double None      
                 c3 | double None      
                  a | double (M, N)    
                 c7 | double None      
                 c6 | double None      
                 c5 | double None      
                 c1 | double None      
                 c2 | double None      
                 c4 | double None      
                 c8 | double None      
                  b | double (M, N)    
           

loop stack:             idx |        min        max       step
                   ---------+---------------------------------
                          j |          4      M - 4          1
                          i |          4      N - 4          1
                   

data sources:          name |  offsets   ...
                   ---------+------------...
                         c0 | None
                         c3 | None
                          a | (j, i + 1)
                            | (j - 3, i - 1)
                            | (j - 3, i - 2)
                            | (j - 1, i + 1)
                            | (j + 1, i + 1)
                            | (j - 2, i + 1)
                            | (j + 1, i)
                            | (j - 1, i - 3)
                            | (j - 2, i - 3)
                            | (j + 3, i + 2)
                            | (j + 1, i + 3)
                            | (j + 4, i + 4)
                            | (j + 3, i + 4)
                            | (j + 2, i + 1)
                            | (j - 1, i - 4)
                            | (j - 2, i - 4)
                            | (j - 4, i + 3)
                            | (j - 4, i - 1)
                            | (j - 4, i - 2)
                            | (j - 3, i + 3)
                            | (j - 1, i + 4)
                            | (j + 4, i + 2)
                            | (j - 2, i + 4)
                            | (j, i + 4)
                            | (j + 2, i - 4)
                            | (j - 4, i - 3)
                            | (j + 4, i - 4)
                            | (j - 4, i + 2)
                            | (j - 3, i + 4)
                            | (j + 2, i + 4)
                            | (j, i + 2)
                            | (j + 1, i - 2)
                            | (j - 4, i + 4)
                            | (j + 4, i)
                            | (j + 3, i + 3)
                            | (j + 1, i + 4)
                            | (j - 2, i)
                            | (j - 1, i)
                            | (j + 3, i - 3)
                            | (j + 2, i - 1)
                            | (j + 2, i - 2)
                            | (j + 3, i - 2)
                            | (j + 4, i - 1)
                            | (j + 4, i - 2)
                            | (j + 1, i - 3)
                            | (j + 2, i)
                            | (j, i - 3)
                            | (j - 4, i + 1)
                            | (j - 1, i - 1)
                            | (j - 1, i - 2)
                            | (j - 2, i - 1)
                            | (j, i - 2)
                            | (j, i - 1)
                            | (j - 2, i - 2)
                            | (j + 2, i + 3)
                            | (j - 3, i - 3)
                            | (j, i + 3)
                            | (j - 3, i - 4)
                            | (j - 1, i + 3)
                            | (j - 2, i + 3)
                            | (j, i - 4)
                            | (j - 4, i)
                            | (j + 3, i - 4)
                            | (j + 1, i - 4)
                            | (j - 1, i + 2)
                            | (j + 3, i + 1)
                            | (j - 2, i + 2)
                            | (j + 4, i + 3)
                            | (j + 4, i + 1)
                            | (j + 2, i + 2)
                            | (j - 3, i + 2)
                            | (j + 3, i)
                            | (j + 4, i - 3)
                            | (j, i)
                            | (j - 4, i - 4)
                            | (j + 1, i - 1)
                            | (j + 3, i - 1)
                            | (j - 3, i + 1)
                            | (j + 1, i + 2)
                            | (j - 3, i)
                            | (j + 2, i - 3)
                         c6 | None
                         c5 | None
                         c1 | None
                         c2 | None
                         c4 | None
                         c8 | None
                         c7 | None
                   

data destinations:     name |  offsets   ...
                   ---------+------------...
                          b | (j, i)
                   

FLOPs:      op | count 
           ----+-------
             * |    9
             + |   80
                =======
                   89

constants:     name | value     
           ---------+-----------
                  N | 3000      
                  M | 3000      
           

Ports and cycles: {'5': 40.0, '2': 360.0, '6': 40.0, '2D': 360.0, '0': 72.0, '1': 640.0, '4': 8.0, '3': 360.0, '7': 8.0, '0DV': 0.0, '3D': 360.0}
Uops: 1536.0
Throughput: 2.89 GFLOP/s
T_nOL = 360.0 cy/CL
T_OL = 640.0 cy/CL
{'accesses': {'a': [(j, i + 1),
                    (j - 3, i - 1),
                    (j - 3, i - 2),
                    (j + 4, i + 4),
                    (j + 1, i + 3),
                    (j + 3, i + 4),
                    (j + 2, i + 1),
                    (j - 4, i + 3),
                    (j - 3, i + 3),
                    (j - 1, i + 4),
                    (j - 2, i + 4),
                    (j - 4, i - 3),
                    (j + 4, i - 4),
                    (j + 2, i - 4),
                    (j - 4, i + 2),
                    (j, i + 2),
                    (j + 4, i),
                    (j + 1, i - 3),
                    (j + 2, i),
                    (j, i - 3),
                    (j - 4, i + 1),
                    (j - 1, i - 1),
                    (j - 1, i - 2),
                    (j - 2, i - 1),
                    (j - 2, i - 2),
                    (j + 2, i + 3),
                    (j - 3, i - 3),
                    (j, i + 3),
                    (j + 4, i + 1),
                    (j + 2, i + 2),
                    (j + 3, i),
                    (j + 4, i - 3),
                    (j, i),
                    (j - 4, i - 4),
                    (j - 3, i + 1),
                    (j - 3, i),
                    (j - 1, i + 1),
                    (j + 1, i + 1),
                    (j - 2, i + 1),
                    (j + 1, i),
                    (j - 1, i - 3),
                    (j - 2, i - 3),
                    (j + 3, i + 2),
                    (j - 1, i - 4),
                    (j - 2, i - 4),
                    (j - 4, i - 1),
                    (j - 4, i - 2),
                    (j, i + 4),
                    (j - 3, i + 4),
                    (j + 2, i + 4),
                    (j + 1, i - 1),
                    (j - 4, i + 4),
                    (j + 3, i + 3),
                    (j + 1, i + 4),
                    (j - 2, i),
                    (j - 1, i),
                    (j + 3, i - 3),
                    (j + 2, i - 1),
                    (j + 2, i - 2),
                    (j + 4, i - 1),
                    (j + 4, i - 2),
                    (j + 3, i - 1),
                    (j, i - 2),
                    (j, i - 1),
                    (j - 3, i - 4),
                    (j - 1, i + 3),
                    (j - 2, i + 3),
                    (j, i - 4),
                    (j - 4, i),
                    (j + 3, i - 4),
                    (j + 1, i - 4),
                    (j - 1, i + 2),
                    (j + 3, i + 1),
                    (j - 2, i + 2),
                    (j + 4, i + 3),
                    (j - 3, i + 2),
                    (j + 1, i - 2),
                    (j + 3, i - 2),
                    (j + 4, i + 2),
                    (j + 1, i + 2),
                    (j + 2, i - 3)],
              'b': [(j, i)],
              'c0': [None],
              'c1': [None],
              'c2': [None],
              'c3': [None],
              'c4': [None],
              'c5': [None],
              'c6': [None],
              'c7': [None],
              'c8': [None]},
 'cache': [{'evicts': 1,
            'hits': 72,
            'misses': 10,
            'name': 'L1',
            'requirement': 656,
            'tail': 8},
           {'evicts': 1,
            'hits': 80,
            'misses': 2,
            'name': 'L2',
            'requirement': 239936,
            'tail': 23936},
           {'evicts': 1,
            'hits': 80,
            'misses': 2,
            'name': 'L3',
            'requirement': 239936,
            'tail': 23936}],
 'destinations': {('b', (j, i))},
 'distances': [oo,
               oo,
               2992,
               2992,
               2992,
               2992,
               2992,
               2992,
               2992,
               2992,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1],
 'distances_bytes': [oo,
                     oo,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8]}
L2 = 84.15 GFLOP/s
L3 = 308.53 GFLOP/s
MEM = 236.96 GFLOP/s
memory cycles based on copy kernel with 63.90 GB/s
{ 640.0 || 360.0 | 22.0 | 6.0 | 7.8 } cy/CL = 2.89 GFLOP/s
{ 640.0 \ 640.0 \ 640.0 \ 640.0 } cy/CL
saturating at 81.9 cores

