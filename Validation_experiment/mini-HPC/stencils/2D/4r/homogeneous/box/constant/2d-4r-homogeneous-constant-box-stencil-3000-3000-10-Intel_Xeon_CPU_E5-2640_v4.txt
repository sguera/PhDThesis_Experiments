                                   kerncraft                                    
/users/staff/ifi/guerrera/THESIS/stempelvalidation/stencils/2D/4r/homogeneous/box/constant/2d-4r-homogeneous-constant-box-stencil.c        -m Intel_Xeon_CPU_E5-2640_v4.yml
-D M 3000 -D N 3000
----------------------------------- Roofline -----------------------------------
double a[M][N];
double b[M][N];
double c0;

for(int j=4; j < M-4; j++){
for(int i=4; i < N-4; i++){
b[j][i] = c0 * (a[j][i]
+ a[j-4][i-4]
+ a[j-3][i-4]
+ a[j-2][i-4]
+ a[j-1][i-4]
+ a[j][i-4]
+ a[j+1][i-4]
+ a[j+2][i-4]
+ a[j+3][i-4]
+ a[j+4][i-4]
+ a[j-4][i-3]
+ a[j-3][i-3]
+ a[j-2][i-3]
+ a[j-1][i-3]
+ a[j][i-3]
+ a[j+1][i-3]
+ a[j+2][i-3]
+ a[j+3][i-3]
+ a[j+4][i-3]
+ a[j-4][i-2]
+ a[j-3][i-2]
+ a[j-2][i-2]
+ a[j-1][i-2]
+ a[j][i-2]
+ a[j+1][i-2]
+ a[j+2][i-2]
+ a[j+3][i-2]
+ a[j+4][i-2]
+ a[j-4][i-1]
+ a[j-3][i-1]
+ a[j-2][i-1]
+ a[j-1][i-1]
+ a[j][i-1]
+ a[j+1][i-1]
+ a[j+2][i-1]
+ a[j+3][i-1]
+ a[j+4][i-1]
+ a[j-4][i]
+ a[j-3][i]
+ a[j-2][i]
+ a[j-1][i]
+ a[j+1][i]
+ a[j+2][i]
+ a[j+3][i]
+ a[j+4][i]
+ a[j-4][i+1]
+ a[j-3][i+1]
+ a[j-2][i+1]
+ a[j-1][i+1]
+ a[j][i+1]
+ a[j+1][i+1]
+ a[j+2][i+1]
+ a[j+3][i+1]
+ a[j+4][i+1]
+ a[j-4][i+2]
+ a[j-3][i+2]
+ a[j-2][i+2]
+ a[j-1][i+2]
+ a[j][i+2]
+ a[j+1][i+2]
+ a[j+2][i+2]
+ a[j+3][i+2]
+ a[j+4][i+2]
+ a[j-4][i+3]
+ a[j-3][i+3]
+ a[j-2][i+3]
+ a[j-1][i+3]
+ a[j][i+3]
+ a[j+1][i+3]
+ a[j+2][i+3]
+ a[j+3][i+3]
+ a[j+4][i+3]
+ a[j-4][i+4]
+ a[j-3][i+4]
+ a[j-2][i+4]
+ a[j-1][i+4]
+ a[j][i+4]
+ a[j+1][i+4]
+ a[j+2][i+4]
+ a[j+3][i+4]
+ a[j+4][i+4]
);
}
}


variables:     name |   type size             
           ---------+-------------------------
                  b | double (M, N)    
                 c0 | double None      
                  a | double (M, N)    
           

loop stack:             idx |        min        max       step
                   ---------+---------------------------------
                          j |          4      M - 4          1
                          i |          4      N - 4          1
                   

data sources:          name |  offsets   ...
                   ---------+------------...
                         c0 | None
                          a | (j - 3, i + 4)
                            | (j + 4, i)
                            | (j, i - 3)
                            | (j + 1, i - 4)
                            | (j, i)
                            | (j - 4, i - 3)
                            | (j - 3, i)
                            | (j - 3, i - 4)
                            | (j + 1, i)
                            | (j - 2, i + 2)
                            | (j + 1, i - 3)
                            | (j - 1, i + 2)
                            | (j + 3, i - 3)
                            | (j + 2, i + 2)
                            | (j + 3, i + 4)
                            | (j - 4, i + 2)
                            | (j + 4, i - 2)
                            | (j + 4, i - 1)
                            | (j - 2, i + 4)
                            | (j - 1, i + 4)
                            | (j, i + 3)
                            | (j, i + 1)
                            | (j - 2, i - 4)
                            | (j - 1, i - 4)
                            | (j + 4, i + 1)
                            | (j + 1, i + 1)
                            | (j + 3, i + 2)
                            | (j + 3, i + 3)
                            | (j + 1, i + 2)
                            | (j - 3, i + 1)
                            | (j + 1, i - 2)
                            | (j + 1, i - 1)
                            | (j - 2, i - 3)
                            | (j - 1, i - 3)
                            | (j - 3, i - 2)
                            | (j - 4, i - 2)
                            | (j - 4, i - 1)
                            | (j - 3, i - 1)
                            | (j + 3, i - 4)
                            | (j - 2, i)
                            | (j - 1, i)
                            | (j + 2, i)
                            | (j - 4, i + 1)
                            | (j, i + 2)
                            | (j - 1, i + 1)
                            | (j + 4, i - 3)
                            | (j - 2, i + 3)
                            | (j - 1, i + 3)
                            | (j, i - 4)
                            | (j + 4, i - 4)
                            | (j + 2, i - 2)
                            | (j - 3, i - 3)
                            | (j + 2, i - 1)
                            | (j - 2, i - 2)
                            | (j - 1, i - 2)
                            | (j - 2, i - 1)
                            | (j - 1, i - 1)
                            | (j - 4, i)
                            | (j + 3, i)
                            | (j + 2, i + 4)
                            | (j - 3, i + 2)
                            | (j + 2, i + 1)
                            | (j + 3, i + 1)
                            | (j + 1, i + 3)
                            | (j + 2, i + 3)
                            | (j - 4, i - 4)
                            | (j, i - 1)
                            | (j + 4, i + 2)
                            | (j - 4, i + 4)
                            | (j, i + 4)
                            | (j + 3, i - 2)
                            | (j + 3, i - 1)
                            | (j - 3, i + 3)
                            | (j + 1, i + 4)
                            | (j + 4, i + 3)
                            | (j + 2, i - 3)
                            | (j, i - 2)
                            | (j - 4, i + 3)
                            | (j + 2, i - 4)
                            | (j - 2, i + 1)
                            | (j + 4, i + 4)
                   

data destinations:     name |  offsets   ...
                   ---------+------------...
                          b | (j, i)
                   

FLOPs:      op | count 
           ----+-------
             + |   80
             * |    1
                =======
                   81

constants:     name | value     
           ---------+-----------
                  M | 3000      
                  N | 3000      
           

{'accesses': {'a': [(j + 4, i),
                    (j, i - 3),
                    (j + 1, i - 4),
                    (j - 3, i),
                    (j - 4, i - 3),
                    (j - 3, i - 4),
                    (j + 1, i),
                    (j + 1, i - 3),
                    (j + 3, i - 3),
                    (j + 4, i - 1),
                    (j - 2, i - 4),
                    (j - 1, i - 4),
                    (j + 4, i + 1),
                    (j - 3, i + 1),
                    (j + 1, i - 2),
                    (j + 1, i - 1),
                    (j - 2, i - 3),
                    (j - 1, i - 3),
                    (j + 4, i + 3),
                    (j - 4, i - 2),
                    (j - 4, i - 1),
                    (j + 3, i - 4),
                    (j + 4, i - 3),
                    (j - 2, i + 3),
                    (j - 1, i + 3),
                    (j + 4, i - 4),
                    (j - 2, i - 2),
                    (j - 1, i - 2),
                    (j - 2, i - 1),
                    (j - 1, i - 1),
                    (j + 3, i),
                    (j + 3, i + 1),
                    (j + 1, i + 3),
                    (j + 4, i + 2),
                    (j - 4, i + 4),
                    (j, i + 4),
                    (j + 3, i - 2),
                    (j + 3, i - 1),
                    (j + 2, i - 3),
                    (j, i - 1),
                    (j, i - 2),
                    (j + 2, i - 4),
                    (j - 3, i + 4),
                    (j, i),
                    (j - 2, i + 2),
                    (j - 1, i + 2),
                    (j + 2, i + 2),
                    (j - 2, i + 4),
                    (j - 1, i + 4),
                    (j, i + 3),
                    (j, i + 1),
                    (j + 1, i + 1),
                    (j + 3, i + 2),
                    (j + 3, i + 3),
                    (j + 1, i + 2),
                    (j + 3, i + 4),
                    (j - 3, i - 2),
                    (j - 3, i - 1),
                    (j - 2, i),
                    (j - 1, i),
                    (j, i + 2),
                    (j + 2, i),
                    (j - 4, i + 1),
                    (j - 2, i + 1),
                    (j, i - 4),
                    (j + 2, i - 2),
                    (j + 2, i - 1),
                    (j - 3, i - 3),
                    (j - 4, i),
                    (j + 2, i + 4),
                    (j - 3, i + 2),
                    (j + 2, i + 1),
                    (j + 2, i + 3),
                    (j - 4, i - 4),
                    (j + 1, i + 4),
                    (j - 3, i + 3),
                    (j - 4, i + 2),
                    (j - 4, i + 3),
                    (j + 4, i - 2),
                    (j - 1, i + 1),
                    (j + 4, i + 4)],
              'b': [(j, i)],
              'c0': [None]},
 'cache': [{'evicts': 1,
            'hits': 72,
            'misses': 10,
            'name': 'L1',
            'requirement': 656,
            'tail': 8},
           {'evicts': 1,
            'hits': 80,
            'misses': 2,
            'name': 'L2',
            'requirement': 239936,
            'tail': 23936},
           {'evicts': 1,
            'hits': 80,
            'misses': 2,
            'name': 'L3',
            'requirement': 239936,
            'tail': 23936}],
 'destinations': {('b', (j, i))},
 'distances': [oo,
               oo,
               2992,
               2992,
               2992,
               2992,
               2992,
               2992,
               2992,
               2992,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1],
 'distances_bytes': [oo,
                     oo,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8]}
Bottlenecks:
  level | a. intensity |   performance   |   peak bandwidth  | peak bandwidth kernel
--------+--------------+-----------------+-------------------+----------------------
    CPU |              |  416.00 GFLOP/s |                   |
     L1 |  0.53 FLOP/B |  206.78 GFLOP/s |       388.04 GB/s | triad   
     L2 |  0.92 FLOP/B |  350.35 GFLOP/s |       380.62 GB/s | triad   
     L3 |   3.4 FLOP/B | 1121.44 GFLOP/s |       332.28 GB/s | copy    
    MEM |   3.4 FLOP/B |  215.36 GFLOP/s |        63.81 GB/s | copy    

Cache or mem bound.
206.78 GFLOP/s due to L1 transfer bottleneck (with bw from triad benchmark)
Arithmetic Intensity: 0.53 FLOP/B

                                   kerncraft                                    
/users/staff/ifi/guerrera/THESIS/stempelvalidation/stencils/2D/4r/homogeneous/box/constant/2d-4r-homogeneous-constant-box-stencil.c        -m Intel_Xeon_CPU_E5-2640_v4.yml
-D M 3000 -D N 3000
------------------------------------- ECM --------------------------------------
double a[M][N];
double b[M][N];
double c0;

for(int j=4; j < M-4; j++){
for(int i=4; i < N-4; i++){
b[j][i] = c0 * (a[j][i]
+ a[j-4][i-4]
+ a[j-3][i-4]
+ a[j-2][i-4]
+ a[j-1][i-4]
+ a[j][i-4]
+ a[j+1][i-4]
+ a[j+2][i-4]
+ a[j+3][i-4]
+ a[j+4][i-4]
+ a[j-4][i-3]
+ a[j-3][i-3]
+ a[j-2][i-3]
+ a[j-1][i-3]
+ a[j][i-3]
+ a[j+1][i-3]
+ a[j+2][i-3]
+ a[j+3][i-3]
+ a[j+4][i-3]
+ a[j-4][i-2]
+ a[j-3][i-2]
+ a[j-2][i-2]
+ a[j-1][i-2]
+ a[j][i-2]
+ a[j+1][i-2]
+ a[j+2][i-2]
+ a[j+3][i-2]
+ a[j+4][i-2]
+ a[j-4][i-1]
+ a[j-3][i-1]
+ a[j-2][i-1]
+ a[j-1][i-1]
+ a[j][i-1]
+ a[j+1][i-1]
+ a[j+2][i-1]
+ a[j+3][i-1]
+ a[j+4][i-1]
+ a[j-4][i]
+ a[j-3][i]
+ a[j-2][i]
+ a[j-1][i]
+ a[j+1][i]
+ a[j+2][i]
+ a[j+3][i]
+ a[j+4][i]
+ a[j-4][i+1]
+ a[j-3][i+1]
+ a[j-2][i+1]
+ a[j-1][i+1]
+ a[j][i+1]
+ a[j+1][i+1]
+ a[j+2][i+1]
+ a[j+3][i+1]
+ a[j+4][i+1]
+ a[j-4][i+2]
+ a[j-3][i+2]
+ a[j-2][i+2]
+ a[j-1][i+2]
+ a[j][i+2]
+ a[j+1][i+2]
+ a[j+2][i+2]
+ a[j+3][i+2]
+ a[j+4][i+2]
+ a[j-4][i+3]
+ a[j-3][i+3]
+ a[j-2][i+3]
+ a[j-1][i+3]
+ a[j][i+3]
+ a[j+1][i+3]
+ a[j+2][i+3]
+ a[j+3][i+3]
+ a[j+4][i+3]
+ a[j-4][i+4]
+ a[j-3][i+4]
+ a[j-2][i+4]
+ a[j-1][i+4]
+ a[j][i+4]
+ a[j+1][i+4]
+ a[j+2][i+4]
+ a[j+3][i+4]
+ a[j+4][i+4]
);
}
}


variables:     name |   type size             
           ---------+-------------------------
                  b | double (M, N)    
                 c0 | double None      
                  a | double (M, N)    
           

loop stack:             idx |        min        max       step
                   ---------+---------------------------------
                          j |          4      M - 4          1
                          i |          4      N - 4          1
                   

data sources:          name |  offsets   ...
                   ---------+------------...
                         c0 | None
                          a | (j - 3, i + 4)
                            | (j + 4, i)
                            | (j, i - 3)
                            | (j + 1, i - 4)
                            | (j, i)
                            | (j - 4, i - 3)
                            | (j - 3, i)
                            | (j - 3, i - 4)
                            | (j + 1, i)
                            | (j - 2, i + 2)
                            | (j + 1, i - 3)
                            | (j - 1, i + 2)
                            | (j + 3, i - 3)
                            | (j + 2, i + 2)
                            | (j + 3, i + 4)
                            | (j - 4, i + 2)
                            | (j + 4, i - 2)
                            | (j + 4, i - 1)
                            | (j - 2, i + 4)
                            | (j - 1, i + 4)
                            | (j, i + 3)
                            | (j, i + 1)
                            | (j - 2, i - 4)
                            | (j - 1, i - 4)
                            | (j + 4, i + 1)
                            | (j + 1, i + 1)
                            | (j + 3, i + 2)
                            | (j + 3, i + 3)
                            | (j + 1, i + 2)
                            | (j - 3, i + 1)
                            | (j + 1, i - 2)
                            | (j + 1, i - 1)
                            | (j - 2, i - 3)
                            | (j - 1, i - 3)
                            | (j - 3, i - 2)
                            | (j - 4, i - 2)
                            | (j - 4, i - 1)
                            | (j - 3, i - 1)
                            | (j + 3, i - 4)
                            | (j - 2, i)
                            | (j - 1, i)
                            | (j + 2, i)
                            | (j - 4, i + 1)
                            | (j, i + 2)
                            | (j - 1, i + 1)
                            | (j + 4, i - 3)
                            | (j - 2, i + 3)
                            | (j - 1, i + 3)
                            | (j, i - 4)
                            | (j + 4, i - 4)
                            | (j + 2, i - 2)
                            | (j - 3, i - 3)
                            | (j + 2, i - 1)
                            | (j - 2, i - 2)
                            | (j - 1, i - 2)
                            | (j - 2, i - 1)
                            | (j - 1, i - 1)
                            | (j - 4, i)
                            | (j + 3, i)
                            | (j + 2, i + 4)
                            | (j - 3, i + 2)
                            | (j + 2, i + 1)
                            | (j + 3, i + 1)
                            | (j + 1, i + 3)
                            | (j + 2, i + 3)
                            | (j - 4, i - 4)
                            | (j, i - 1)
                            | (j + 4, i + 2)
                            | (j - 4, i + 4)
                            | (j, i + 4)
                            | (j + 3, i - 2)
                            | (j + 3, i - 1)
                            | (j - 3, i + 3)
                            | (j + 1, i + 4)
                            | (j + 4, i + 3)
                            | (j + 2, i - 3)
                            | (j, i - 2)
                            | (j - 4, i + 3)
                            | (j + 2, i - 4)
                            | (j - 2, i + 1)
                            | (j + 4, i + 4)
                   

data destinations:     name |  offsets   ...
                   ---------+------------...
                          b | (j, i)
                   

FLOPs:      op | count 
           ----+-------
             + |   80
             * |    1
                =======
                   81

constants:     name | value     
           ---------+-----------
                  M | 3000      
                  N | 3000      
           

Ports and cycles: {'1': 160.0, '0': 2.6, '4': 2.0, '6': 2.8, '3': 154.0, '5': 2.6, '7': 0.0, '2': 154.0, '2D': 152.0, '3D': 154.0, '0DV': 0.0}
Uops: 478.0
Throughput: 6.53 GFLOP/s
T_nOL = 154.0 cy/CL
T_OL = 258.1 cy/CL
{'accesses': {'a': [(j + 4, i),
                    (j, i - 3),
                    (j + 1, i - 4),
                    (j - 3, i),
                    (j - 4, i - 3),
                    (j - 3, i - 4),
                    (j + 1, i),
                    (j + 1, i - 3),
                    (j + 3, i - 3),
                    (j + 4, i - 1),
                    (j - 2, i - 4),
                    (j - 1, i - 4),
                    (j + 4, i + 1),
                    (j - 3, i + 1),
                    (j + 1, i - 2),
                    (j + 1, i - 1),
                    (j - 2, i - 3),
                    (j - 1, i - 3),
                    (j + 4, i + 3),
                    (j - 4, i - 2),
                    (j - 4, i - 1),
                    (j + 3, i - 4),
                    (j + 4, i - 3),
                    (j - 2, i + 3),
                    (j - 1, i + 3),
                    (j + 4, i - 4),
                    (j - 2, i - 2),
                    (j - 1, i - 2),
                    (j - 2, i - 1),
                    (j - 1, i - 1),
                    (j + 3, i),
                    (j + 3, i + 1),
                    (j + 1, i + 3),
                    (j + 4, i + 2),
                    (j - 4, i + 4),
                    (j, i + 4),
                    (j + 3, i - 2),
                    (j + 3, i - 1),
                    (j + 2, i - 3),
                    (j, i - 1),
                    (j, i - 2),
                    (j + 2, i - 4),
                    (j - 3, i + 4),
                    (j, i),
                    (j - 2, i + 2),
                    (j - 1, i + 2),
                    (j + 2, i + 2),
                    (j - 2, i + 4),
                    (j - 1, i + 4),
                    (j, i + 3),
                    (j, i + 1),
                    (j + 1, i + 1),
                    (j + 3, i + 2),
                    (j + 3, i + 3),
                    (j + 1, i + 2),
                    (j + 3, i + 4),
                    (j - 3, i - 2),
                    (j - 3, i - 1),
                    (j - 2, i),
                    (j - 1, i),
                    (j, i + 2),
                    (j + 2, i),
                    (j - 4, i + 1),
                    (j - 2, i + 1),
                    (j, i - 4),
                    (j + 2, i - 2),
                    (j + 2, i - 1),
                    (j - 3, i - 3),
                    (j - 4, i),
                    (j + 2, i + 4),
                    (j - 3, i + 2),
                    (j + 2, i + 1),
                    (j + 2, i + 3),
                    (j - 4, i - 4),
                    (j + 1, i + 4),
                    (j - 3, i + 3),
                    (j - 4, i + 2),
                    (j - 4, i + 3),
                    (j + 4, i - 2),
                    (j - 1, i + 1),
                    (j + 4, i + 4)],
              'b': [(j, i)],
              'c0': [None]},
 'cache': [{'evicts': 1,
            'hits': 72,
            'misses': 10,
            'name': 'L1',
            'requirement': 656,
            'tail': 8},
           {'evicts': 1,
            'hits': 80,
            'misses': 2,
            'name': 'L2',
            'requirement': 239936,
            'tail': 23936},
           {'evicts': 1,
            'hits': 80,
            'misses': 2,
            'name': 'L3',
            'requirement': 239936,
            'tail': 23936}],
 'destinations': {('b', (j, i))},
 'distances': [oo,
               oo,
               2992,
               2992,
               2992,
               2992,
               2992,
               2992,
               2992,
               2992,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1],
 'distances_bytes': [oo,
                     oo,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     23936,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8,
                     8]}
L2 = 76.58 GFLOP/s
L3 = 280.80 GFLOP/s
MEM = 215.66 GFLOP/s
memory cycles based on copy kernel with 63.90 GB/s
{ 258.1 || 154.0 | 22.0 | 6.0 | 7.8 } cy/CL = 6.53 GFLOP/s
{ 258.1 \ 258.1 \ 258.1 \ 258.1 } cy/CL
saturating at 33.0 cores

